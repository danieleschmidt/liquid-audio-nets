# Security Scanning Pipeline for liquid-audio-nets
# This file should be placed in .github/workflows/security-scan.yml
# Manual creation required due to GitHub App permission limitations

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM

permissions:
  contents: read
  security-events: write

env:
  CARGO_TERM_COLOR: always

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install detect-secrets
      run: pip install detect-secrets
    
    - name: Run secret scan
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline
        if [ $? -ne 0 ]; then
          echo "❌ Secrets detected! Please review and update .secrets.baseline if needed"
          exit 1
        fi
        echo "✅ No secrets detected"

  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
        cargo install cargo-audit cargo-deny
    
    - name: Python dependency scan
      run: |
        pip install -e .
        safety check
        bandit -r python/ -f json -o bandit-report.json
    
    - name: Rust dependency scan
      run: |
        cargo audit
        cargo deny check
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  code-analysis:
    runs-on: ubuntu-latest
    name: Static Code Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install analysis tools
      run: pip install semgrep mypy
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto python/ --json --output=semgrep-results.json
    
    - name: Run MyPy type checking
      run: |
        mypy python/liquid_audio_nets --ignore-missing-imports
    
    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-results
        path: semgrep-results.json

  codeql-analysis:
    runs-on: ubuntu-latest
    name: CodeQL Analysis
    
    strategy:
      matrix:
        language: ['python', 'cpp']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Setup build environment
      if: matrix.language == 'cpp'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Build C++ code
      if: matrix.language == 'cpp'
      run: |
        mkdir build && cd build
        cmake .. && make
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  embedded-security:
    runs-on: ubuntu-latest
    name: Embedded Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        override: true
    
    - name: Add embedded targets
      run: |
        rustup target add thumbv7em-none-eabihf
        rustup target add thumbv6m-none-eabi
    
    - name: Security-focused clippy for embedded
      run: |
        cargo clippy --target thumbv7em-none-eabihf --no-default-features --features embedded -- \
          -D clippy::cast_ptr_alignment \
          -D clippy::mem_forget \
          -D clippy::mut_from_ref \
          -D clippy::transmute_ptr_to_ptr \
          -D clippy::undocumented_unsafe_blocks
    
    - name: Check for unsafe code patterns
      run: |
        echo "Scanning for unsafe patterns in embedded code..."
        if grep -r "unsafe" src/ --include="*.rs" | grep -v "// SAFETY:"; then
          echo "❌ Found unsafe code without safety comments"
          exit 1
        fi
        echo "✅ All unsafe code is documented"

  container-scan:
    runs-on: ubuntu-latest
    name: Container Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t liquid-audio-nets:test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'liquid-audio-nets:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  supply-chain:
    runs-on: ubuntu-latest
    name: Supply Chain Security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install cyclonedx-bom
      run: pip install cyclonedx-bom[requirements]
    
    - name: Generate Python SBOM
      run: |
        pip install -e .
        cyclonedx-bom requirements pyproject.toml -o sbom-python.json
    
    - name: Install Rust SBOM tool
      run: cargo install cargo-cyclonedx
    
    - name: Generate Rust SBOM
      run: cargo cyclonedx --format json --output-file sbom-rust.json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: software-bill-of-materials
        path: |
          sbom-python.json
          sbom-rust.json

  security-report:
    runs-on: ubuntu-latest
    name: Generate Security Report
    needs: [secret-scan, dependency-scan, code-analysis, codeql-analysis, embedded-security, container-scan, supply-chain]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Embedded Security: ${{ needs.embedded-security.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- Supply Chain: ${{ needs.supply-chain.result }}" >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });