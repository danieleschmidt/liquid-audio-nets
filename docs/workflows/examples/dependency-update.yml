# Automated Dependency Updates for liquid-audio-nets
# This file should be placed in .github/workflows/dependency-update.yml
# Manual creation required due to GitHub App permission limitations

name: Dependency Updates

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Mondays at 8 AM
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  python-dependencies:
    runs-on: ubuntu-latest
    name: Update Python Dependencies
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pip-tools
      run: pip install pip-tools
    
    - name: Update requirements
      run: |
        pip-compile pyproject.toml --upgrade --output-file requirements.txt
        pip-compile pyproject.toml --extra dev --upgrade --output-file requirements-dev.txt
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore(deps): update Python dependencies'
        title: 'chore(deps): Update Python dependencies'
        body: |
          ## Python Dependency Updates
          
          This PR updates Python dependencies to their latest compatible versions.
          
          ### Changes
          - Updated all Python dependencies in pyproject.toml
          - Regenerated requirements.txt and requirements-dev.txt
          
          ### Testing
          - [ ] All tests pass
          - [ ] No breaking changes detected
          - [ ] Security vulnerabilities addressed
          
          Auto-generated by dependency update workflow.
        branch: update/python-dependencies
        delete-branch: true

  rust-dependencies:
    runs-on: ubuntu-latest
    name: Update Rust Dependencies
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-edit
      run: cargo install cargo-edit
    
    - name: Update Cargo dependencies
      run: |
        cargo upgrade
        cargo update
    
    - name: Check if everything builds
      run: |
        cargo check --all-targets --all-features
        cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore(deps): update Rust dependencies'
        title: 'chore(deps): Update Rust dependencies'
        body: |
          ## Rust Dependency Updates
          
          This PR updates Rust dependencies to their latest compatible versions.
          
          ### Changes
          - Updated all Rust dependencies in Cargo.toml
          - Updated Cargo.lock
          
          ### Testing
          - [x] Cargo check passes
          - [x] Clippy passes without warnings
          - [ ] All tests pass
          - [ ] Embedded targets still compile
          
          Auto-generated by dependency update workflow.
        branch: update/rust-dependencies
        delete-branch: true

  github-actions:
    runs-on: ubuntu-latest
    name: Update GitHub Actions
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update GitHub Actions
      uses: renovatebot/github-action@v39.0.3
      with:
        configurationFile: .github/renovate.json
        token: ${{ secrets.GITHUB_TOKEN }}

  security-updates:
    runs-on: ubuntu-latest
    name: Security Updates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install security tools
      run: |
        pip install safety
        cargo install cargo-audit
    
    - name: Check for Python security issues
      id: python-security
      run: |
        pip install -e .
        if ! safety check; then
          echo "python_vulnerabilities=true" >> $GITHUB_OUTPUT
        else
          echo "python_vulnerabilities=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for Rust security issues
      id: rust-security
      run: |
        if ! cargo audit; then
          echo "rust_vulnerabilities=true" >> $GITHUB_OUTPUT
        else
          echo "rust_vulnerabilities=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create security issue
      if: steps.python-security.outputs.python_vulnerabilities == 'true' || steps.rust-security.outputs.rust_vulnerabilities == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security vulnerabilities detected in dependencies',
            body: `## Security Alert
            
            Automated dependency scanning has detected security vulnerabilities.
            
            ### Python Issues
            - Vulnerabilities detected: ${{ steps.python-security.outputs.python_vulnerabilities }}
            
            ### Rust Issues  
            - Vulnerabilities detected: ${{ steps.rust-security.outputs.rust_vulnerabilities }}
            
            ### Next Steps
            1. Review the vulnerability details
            2. Update affected dependencies
            3. Test the updates
            4. Deploy security patches
            
            **Priority**: High - Address within 24 hours
            `,
            labels: ['security', 'dependencies', 'high-priority']
          })

  compatibility-check:
    runs-on: ubuntu-latest
    name: Compatibility Check
    needs: [python-dependencies, rust-dependencies]
    if: always()
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
        target: [x86_64-unknown-linux-gnu, thumbv7em-none-eabihf]
    
    steps:
    - name: Checkout updated code
      uses: actions/checkout@v4
      with:
        ref: update/python-dependencies
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Test Python compatibility
      run: |
        pip install -e .[dev,test]
        python -c "import liquid_audio_nets; print(f'Import successful on Python {matrix.python-version}')"
    
    - name: Test Rust compatibility
      run: |
        if [[ "${{ matrix.target }}" == "thumbv7em-none-eabihf" ]]; then
          cargo check --target ${{ matrix.target }} --no-default-features --features embedded
        else
          cargo test --target ${{ matrix.target }}
        fi
    
    - name: Comment on compatibility
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `❌ Compatibility check failed for Python ${{ matrix.python-version }} on target ${{ matrix.target }}`
          })

  documentation-update:
    runs-on: ubuntu-latest
    name: Update Documentation
    needs: [python-dependencies, rust-dependencies]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Update changelog
      run: |
        echo "## Dependency Updates - $(date +%Y-%m-%d)" >> TEMP_CHANGELOG.md
        echo "" >> TEMP_CHANGELOG.md
        echo "### Updated Dependencies" >> TEMP_CHANGELOG.md
        echo "- Python dependencies updated to latest compatible versions" >> TEMP_CHANGELOG.md
        echo "- Rust dependencies updated to latest compatible versions" >> TEMP_CHANGELOG.md
        echo "" >> TEMP_CHANGELOG.md
        cat CHANGELOG.md >> TEMP_CHANGELOG.md
        mv TEMP_CHANGELOG.md CHANGELOG.md
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "docs: update changelog with dependency updates" || exit 0
        git push

  notification:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [python-dependencies, rust-dependencies, security-updates, compatibility-check]
    if: always()
    
    steps:
    - name: Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#dev-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        message: |
          Dependency update workflow completed
          - Python deps: ${{ needs.python-dependencies.result }}
          - Rust deps: ${{ needs.rust-dependencies.result }}
          - Security check: ${{ needs.security-updates.result }}
          - Compatibility: ${{ needs.compatibility-check.result }}